#!/usr/bin/env ruby
# Copyright (c) Borislav Stanimirov
# SPDX-License-Identifier: MIT
#
require 'fileutils'

VERSION = "1.0.2"

VERSION_TEXT = "git-lfs-download v#{VERSION}"
USAGE = <<USG

Usage:
  git-lfs-download <repo-uri> [--match <pattern>] [--without <pattern>]
USG
HELP = <<HLP

  Download a git-lfs repository

  Options:

  <repo-uri>      URI of git repo

  -m, --match     A positive match pattern for lfs files to download.
                  If a pattern is provided, lfs files will be filtered by it.
                  Multiple patterns are allowed,

  -w, --without   A negative match pattern. If provided, fls files which
                  match will be filtered OUT.

  -?, -h, --help  Show this help message.
  -v, --version   Show the version number (#{VERSION})
HLP

if ARGV.empty?
  puts USAGE
  exit
end

REPO = ARGV.shift
case REPO
when '-?', '-h', '--help'
  puts VERSION_TEXT
  puts USAGE
  puts HELP
  exit
when '-v', '--version'
  puts VERSION_TEXT
  exit
end

def check_arg(opt, arg)
  return
end

patterns_match = []
patterns_without = []

ARGV.each_slice(2) do |opt, arg|
  if !arg
    STDERR.puts "Missing argument to '#{opt}'"
    STDERR.puts USAGE
    exit 1
  end
  case opt
  when '-m', '--match'   then patterns_match << arg
  when '-w', '--without' then patterns_without << arg
  else
    STDERR.puts "Unknown option '#{opt}'"
    exit 1
  end
end

tgt_dir = File.basename(REPO, ".git")
raise "'#{tgt_dir}' exist" if File.exist?(tgt_dir)

# clone repo
res = system({'GIT_LFS_SKIP_SMUDGE' => '1'}, "git clone --depth 1 \"#{REPO}\" \"#{tgt_dir}\"")
raise "could not clone #{REPO}" if !res

Dir.chdir(tgt_dir) do
  files = []

  # positive: collect all lfs files
  all_files = Dir['**/*'].select { File.file? _1 }
  File.readlines(".gitattributes").each { |attrib|
    next if !(attrib =~ /(.*) filter=lfs\s/)
    lfs, all_files = all_files.partition { File.fnmatch?($1, _1) }
    files += lfs
  }

  # negative: remove 'without' globs
  if !patterns_without.empty?
    files.delete_if { |file|
      patterns_without.any? { File.fnmatch?(_1, file) }
    }
  end

  # positive: collect 'match' globs
  if !patterns_match.empty?
    files.keep_if { |file|
      patterns_match.any? { File.fnmatch?(_1, file) }
    }
  end

  # build sha -> file hash
  sha_file = {}
  files.each do |f|
    lines = File.readlines(f)
    if lines[0].strip != 'version https://git-lfs.github.com/spec/v1'
      puts "'#{f}' seems like a false positive for lfs"
      next
    end
    if !(lines[1] =~ /^oid sha256\:([0-9a-f]+)$/)
      puts "bad sha in '#{f}'"
      next
    end
    sha_file[$1] = f
  end

  puts "Identified #{sha_file.size} files which match the provided globs"

  # process files
  sha_file.each do |sha, file|
    puts "processing #{file}"

    # fetch
    res = system "git lfs fetch --include \"#{file}\""
    raise "could not fetch '#{file}'" if !res

    # ... and move
    FileUtils.mv ['.git/lfs/objects', sha.unpack('a2a2'), sha].join('/'), file
  end

  # FileUtils.rm_rf(".git")
  # should we remove the .git dir?
  # even though the repo is kinda broken having binary lfs files,
  # .git is not corrupt or anything
end




